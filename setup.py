#!/usr/bin/env python3
"""
South Park Stream Bot Setup Script
This script helps users set up the bot with proper configuration.
"""

import os
import sys
import subprocess

def create_config_file():
    """Create or update the config.py file"""
    print("\n=== Bot Configuration Setup ===")
    print("\nTo use this bot, you need a Discord Bot Token.")
    print("Here's how to get one:")
    print("1. Go to https://discord.com/developers/applications")
    print("2. Click 'New Application' and give it a name")
    print("3. Go to 'Bot' section and click 'Add Bot'")
    print("4. Copy the token from the 'Token' section")
    print("5. Invite the bot to your server with proper permissions")
    
    print("\n" + "="*50)
    
    # Get bot token
    while True:
        token = input("\nEnter your Discord Bot Token (or 'skip' to configure later): ").strip()
        if token.lower() == 'skip':
            token = 'YOUR_BOT_TOKEN_HERE'
            break
        elif len(token) > 50:  # Basic validation
            break
        else:
            print("That doesn't look like a valid bot token. Please try again.")
    
    # Get command prefix
    prefix = input("Enter command prefix (default: !): ").strip() or '!'
    
    # Get other settings
    print("\n=== Stream Settings ===")
    fps = input("Stream FPS (default: 30): ").strip() or '30'
    width = input("Browser width (default: 1920): ").strip() or '1920'
    height = input("Browser height (default: 1080): ").strip() or '1080'
    
    headless = input("Run browser in background? (y/n, default: n): ").strip().lower()
    headless_mode = 'True' if headless == 'y' else 'False'
    
    # Create config content
    config_content = f'''# Discord Bot Configuration
# Generated by setup script

# Your Discord Bot Token (get from https://discord.com/developers/applications)
BOT_TOKEN = '{token}'

# South Park Stream URL
STREAM_URL = 'https://veplay.top/stream/3b146825-9e54-4e17-b96e-c172ced342ad'

# Bot Settings
COMMAND_PREFIX = '{prefix}'

# Stream Settings
STREAM_FPS = {fps}
STREAM_QUALITY = 'high'  # high, medium, low

# Browser Settings
BROWSER_WIDTH = {width}
BROWSER_HEIGHT = {height}
HEADLESS_MODE = {headless_mode}  # Set to True to run browser in background
'''
    
    # Write config file
    with open('config.py', 'w') as f:
        f.write(config_content)
    
    print("\n‚úÖ Configuration saved to config.py")
    
    if token == 'YOUR_BOT_TOKEN_HERE':
        print("‚ö†Ô∏è  Remember to edit config.py and add your bot token before running!")
    
    return True

def install_dependencies():
    """Install required Python packages"""
    print("\n=== Installing Dependencies ===")
    
    if not os.path.exists('requirements.txt'):
        print("‚ùå requirements.txt not found!")
        return False
    
    try:
        print("Installing Python packages...")
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("‚úÖ Dependencies installed successfully!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install dependencies: {e}")
        print("\nTry running manually: pip install -r requirements.txt")
        return False

def check_chrome():
    """Check if Chrome is installed"""
    print("\n=== Checking Chrome Browser ===")
    
    chrome_paths = [
        r"C:\Program Files\Google\Chrome\Application\chrome.exe",
        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
        r"C:\Users\{}\AppData\Local\Google\Chrome\Application\chrome.exe".format(os.getenv('USERNAME', ''))
    ]
    
    chrome_found = False
    for path in chrome_paths:
        if os.path.exists(path):
            print(f"‚úÖ Chrome found at: {path}")
            chrome_found = True
            break
    
    if not chrome_found:
        print("‚ö†Ô∏è  Chrome browser not found in common locations.")
        print("Please install Google Chrome from: https://www.google.com/chrome/")
        print("The bot needs Chrome to display the stream.")
    
    return chrome_found

def create_bot_permissions_guide():
    """Create a guide for setting up bot permissions"""
    guide_content = '''# Discord Bot Permissions Guide

## Required Permissions

Your bot needs these permissions to work properly:

### Bot Permissions:
- ‚úÖ Send Messages
- ‚úÖ Read Message History
- ‚úÖ Connect (to voice channels)
- ‚úÖ Speak (to stream audio/video)
- ‚úÖ Use Voice Activity

### OAuth2 Scopes:
- ‚úÖ bot
- ‚úÖ applications.commands

## How to Invite Your Bot:

1. Go to Discord Developer Portal: https://discord.com/developers/applications
2. Select your application
3. Go to "OAuth2" > "URL Generator"
4. Select the scopes and permissions listed above
5. Copy the generated URL
6. Open the URL in your browser and invite the bot to your server

## Testing the Bot:

1. Join a voice channel in your Discord server
2. Type `!join` (or your custom prefix + join)
3. The bot should join your voice channel and start streaming
4. Type `!leave` to stop the stream
5. Type `!status` to check if the bot is working

## Troubleshooting:

- Make sure the bot has the required permissions
- Check that your bot token is correct in config.py
- Ensure Chrome browser is installed
- Try running the bot with administrator privileges if needed
'''
    
    with open('PERMISSIONS_GUIDE.md', 'w') as f:
        f.write(guide_content)
    
    print("üìã Created PERMISSIONS_GUIDE.md with setup instructions")

def main():
    print("ü§ñ South Park Stream Bot Setup")
    print("=" * 40)
    
    # Check if we're in the right directory
    if not os.path.exists('bot.py'):
        print("‚ùå Error: bot.py not found in current directory")
        print("Please run this script from the bot directory")
        input("Press Enter to exit...")
        return
    
    print("This setup script will help you configure the South Park Stream Bot.")
    print("\nWhat would you like to do?")
    print("1. Full setup (recommended for first time)")
    print("2. Install dependencies only")
    print("3. Configure bot settings only")
    print("4. Check system requirements")
    
    choice = input("\nEnter your choice (1-4): ").strip()
    
    if choice == '1':
        # Full setup
        print("\nüöÄ Starting full setup...")
        
        # Check Chrome
        check_chrome()
        
        # Install dependencies
        if install_dependencies():
            # Configure bot
            create_config_file()
            create_bot_permissions_guide()
            
            print("\nüéâ Setup complete!")
            print("\nNext steps:")
            print("1. Read PERMISSIONS_GUIDE.md for bot setup instructions")
            print("2. Make sure your bot token is set in config.py")
            print("3. Run the bot with: python bot.py")
            print("   Or use the launcher: python start_bot.py")
            print("   Or double-click: start_bot.bat")
        
    elif choice == '2':
        install_dependencies()
        
    elif choice == '3':
        create_config_file()
        
    elif choice == '4':
        print("\nüîç Checking system requirements...")
        
        # Check Python version
        python_version = sys.version_info
        if python_version >= (3, 8):
            print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
        else:
            print(f"‚ùå Python {python_version.major}.{python_version.minor}.{python_version.micro} (need 3.8+)")
        
        # Check Chrome
        check_chrome()
        
        # Check if config exists
        if os.path.exists('config.py'):
            print("‚úÖ config.py exists")
        else:
            print("‚ùå config.py not found")
        
        # Check dependencies
        try:
            import discord
            print("‚úÖ discord.py installed")
        except ImportError:
            print("‚ùå discord.py not installed")
        
        try:
            import selenium
            print("‚úÖ selenium installed")
        except ImportError:
            print("‚ùå selenium not installed")
    
    else:
        print("Invalid choice. Please run the script again.")
    
    input("\nPress Enter to exit...")

if __name__ == '__main__':
    main()